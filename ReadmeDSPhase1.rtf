{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-BoldOblique;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww28600\viewh15260\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Framework used -> \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}SpringBoot (server-side)\
{\listtext	\uc0\u8226 	}HTML (client-side)\
{\listtext	\uc0\u8226 	}Database(PostgreSQL)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
How to deploy?\
	-Unzip the traveller.zip file.\
	- Open a terminal and cd into the project folder ->\'93
\f1\i\b traveller
\f0\i0\b0 \'94\
	- Type the command -> \'93
\f2\b docker-compose up
\f0\b0 \'94 \
	- The application will exit with status code (0) after running the above mentioned command the first time.\
	- Press 
\f2\b control+c
\f0\b0  to exit the process and then type -> \'93
\f2\b docker-compose up
\f0\b0 \'94 once again. The application\
	  should now run successfully on localhost:8080\
	- Register a user by passing a name as input and reloading localhost:8080 should display the list of 	  users registered.\
	- To check if data is being persisted at the backend. Type command -> \'93
\f2\b docker-compose stop
\f0\b0 \'94 to stop the server.\
	   Now type the command -> \'93
\f2\b docker-compose start
\f0\b0 \'94 to start the server again and the list of saved users would be displayed on localhost:8080.\
\
Client-Server interaction ->\
	- The add a user button on the client-side is hooked with a POST API endpoint served by the 	   SpringBoot application. Upon sending a POST request, a User Object is created with the given 	   name and stored in the PostgreSQL database.\
	- The list of users on the client-side is automatically displayed. The list of users is fetched using a 	   GET API endpoint served by the SpringBoot application. The endpoint pulls data from the    	   PostgreSQL database and returns a list of users registered.\
\
About the application ->\
           - This application has the base foundation for a pub-sub system. Loose-coupling is achieved in the 	   application by using 
\f2\b interfaces
\f0\b0  in the services and repositories which keep the concrete classes 	   independent of each-other.\
           - The application has been dockerized by using two docker containers; one for the SpringBoot                   	   application and one for the PostgreSQL database. They have been linked using docker compose.\
}